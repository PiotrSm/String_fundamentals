plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.myspring'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// swagger
//	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
//	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

	implementation "io.springfox:springfox-boot-starter:3.0.0"
	compile "io.springfox:springfox-swagger-ui:3.0.0"


}

test {
	useJUnitPlatform()
}

task generatePostsAndComments() {
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")
		//posty
		for (int i = 1; i <= 100; i++) {
			dataSql.append("insert into post(id, title, content, created) " +
					"values (${i}, 'Test post ${i}', 'Content ${i}', '"+ LocalDateTime.now().minusDays(100 - i) +"');\n")
		}
		//komentarze
		for (int i = 1; i <= 100; i++) {
			int postId = 1 + i / 10
			dataSql.append("insert into comment(id, post_id, content, created) " +
					"values (${i}, ${postId}, 'Comment ${i}', '"+ LocalDateTime.now().minusDays(100 - i) +"');\n")
		}
	}
}
